class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        vector<int> temp;
        vector<vector<int>> fig(graph.size(),temp);
        vector<vector<int>> time = fig;
        for(int i = 0;i<graph.size();i++) {
            for(int j = 0;j<graph.size();j++) {
                if(j == i)
                    continue;
                if(graph[i][j] == 1)
                    fig[i].push_back(j);
            }
        }
        
        map<int,int> M;
        for(int i = 0;i<initial.size();i++)
            M[initial[i]] = 1;
        for(int node : initial) {
            map<int,int> tm = M;
            vector<int> v(1, node);
            int from = 0;
            while(from != v.size()) {
                int to = v.size();
                for(int i = from;i<to;i++) {
                    for(int j = 0;j<fig[v[i]].size();j++) {
                        if(tm.count(fig[v[i]][j]) == 0) {
                            v.push_back(fig[v[i]][j]);
                            tm[fig[v[i]][j]] = 1;
                        }
                    }
                }
                from = to;
            }
            for(int i = 0;i<v.size();i++) {
                time[v[i]].push_back(node);
            }
        }
        
        vector<int> res(time.size(),0);
        for(int i = 0;i<time.size();i++) {
            //for(int j = 0;j<time[i].size();j++) {
            //    cout << time[i][j];
            //}
            //cout << endl;
            if(time[i].size() == 1)
                res[time[i][0]] += 1;
        }
        
        int mxnum = 0;
        int mxpos = 0;
        for(int i = 0;i<res.size();i++) {
            if(res[i] > mxnum) {
                mxnum = res[i];
                mxpos = i;
            }
        }
        return mxpos;
    }
};